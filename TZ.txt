Задача:
В местной библиотеке хотят перейти на цифровой учет книг. Вам
необходимо реализовать веб-приложение для них. Библиотекари
должны иметь возможность регистрировать читателей, выдавать им
книги и освобождать книги (после того, как читатель возвращает
книгу обратно в библиотеку).

Отношение между сущностями: Один ко Многим.
У человека может быть множество книг. Книга может принадлежать
только одному человеку.
В БД должно быть две таблицы - Person и Book. Для всех таблиц
настройте автоматическую генерацию id.

Должны быть реализованы сущности (@Entity) Книга и Человек, репозитории и сервисы. PersonDAO и
BookDAO должны быть пустыми и не должны использоваться, вся работа с БД
через сервисы.

Необходимый функционал:
1) Страницы добавления, изменения и удаления человека.
2) Страницы добавления, изменения и удаления книги
3) Страница со списком всех людей (люди кликабельные - при клике осуществляется
переход на страницу человека).
4) Страница со списком всех книг (книги кликабельные - при клике осуществляется
переход на страницу книги).
5) Страница человека, на которой показаны значения его полей и список книг, которые он
взял. Если человек не взял ни одной книги, вместо списка должен быть текст "Человек
пока не взял ни одной книги".
6) Страница книги, на которой показаны значения полей этой книги и имя человека,
который взял эту книгу. Если эта книга не была никем взята, должен быть текст "Эта
книга свободна".
7) На странице книги, если книга взята человеком, рядом с его именем должна быть кнопка
"Освободить книгу". Эта кнопка нажимается библиотекарем тогда, когда читатель
возвращает эту книгу обратно в библиотеку. После нажатия на эту кнопку книга снова
становится свободно и пропадает из списка книг человека.
8) На странице книги, если книга свободна, должен быть выпадающий список (<select>)
со всеми людьми и кнопка "Назначить книгу". Эта кнопка нажимается библиотекарем
тогда, когда читатель хочет забрать эту книгу домой. После нажатия на эту кнопку, книга
должна начать принадлежать выбранному человеку и должна появится в его списке
книг.
9) Все поля должны валидироваться - с помощью @Valid и Spring Validator, если это
требуется.
10) Добавить пагинацию для книг.
Книг может быть много и они могут не помещаться на одной странице в
браузере. Чтобы решить эту проблему, метод контроллера должен уметь
выдавать не только все книги разом, но и разбивать выдачу на страницы.
11) Добавить сортировку книг по году. Метод контроллера должен уметь
выдавать книги в отсортированном порядке.
12) Создать страницу поиска книг. Вводим в поле на странице начальные буквы
названия книги, получаем полное название книги и имя автора. Также, если
книга сейчас находится у кого-то, получаем имя этого человека.
13) Добавить автоматическую проверку на то, что человек просрочил возврат
книги.

Пагинация
Метод index() в BooksController должен уметь принимать в адресной строке два
ключа: page и books_per_page. Первый ключ сообщает, какую страницу мы
запрашиваем, а второй ключ сообщает, сколько книг должно быть на одной странице.
Нумерация страниц стартует с 0. Если в адресной строке не передаются эти ключи, то
возвращаются как обычно все книги.

Сортировка
Метод index() в BooksController должен уметь принимать в адресной строке ключ
sort_by_year. Если он имеет значение true, то выдача должна быть отсортирована
по году. Если в адресной строке не передается этот ключ, то книги возвращаются в
обычном порядке.

Пагинация и сортировка могут работать одновременно (если передаются сразу три параметра в запросе)

Страница поиска
На странице поиска должна выдаваться найденная книга и текущий хозяин книги, если он есть. Если такой книги не было
найдено, то должно выдаваться сообщение о том, что "Книг не найдено"
Поиск должен производиться по начальным буквам названия книги (с помощью JPA репозитория)

Проверка просрочки книги
При взятии книги человеком, должно сохраняться текущее точное время. Вы должны изменить таблицу и сущность, чтобы сохранять время. Где создать
новое поле и колонку остается на ваше усмотрение. Подумайте, как лучше.
Вся логика по определению просрочки не должна лежать в контроллере, или что еще хуже, в представлении. Вся логика лежит в сервисе, а на представление
отправляется только одно булево значение - просрочена книга (True) или не просрочена (False).
